##################################################################
# Script criado por Claimh
###################################################################
# O script permite que cada habilidade tenha o parâmetro de Level
# ou seja quanto mais você usa a habilidade em batalha mais forte
# ela fica e ainda por cima o custo de SP da habilidade diminui
# semelhante à Secret of Mana.
##################################################################
module Skill_updata
  S_MIGHT = []
  S_COST = []
  S_HIT = []
  S_LEVEL = []
  S_INTER = []
  S_SLOPE = []
  S_ANIME = []
  S_ELEMENT = []
  S_STATE_P = []
  S_STATE_N = []
#####################
# CUSTOMIZAÇÃO GERAL#
#####################
  SKILL_MIGHT_UP = true   #poder da habilidade
  SP_COST_DOWN = true     #Custo de SP diminui
  SKILL_HIT_UP = true     #% de acerto aumenta
  ELEMENT_CHANGE = true   #muda o elemento
  STATE_CHANGE = true     #Vai mudar de elemento
  SHOW_SKILL_LV_UP = true #Vai acionar a janela de LV, quando for LV-UP
  SKILLUP_SE = "056-Right02" #Música do LV-UP
  MENU_COUNT = true       #??????
  UPDATA_INTERVAL = 1     #O numero de vezes que tem que ativar a habilidade para poder aumentar o Level.
  LEVEL_LIMIT = 20        #Limite maximo de LV para habilidade
  MIGHT_RATE = 0.5        #% de poder que ira aumentar a cada LV. 
  COST_RATE = 3           #Custo de SP que ira diminuir a cada LV. 
  HIT_RATE = 1            #% de acerto que ira aumentar a cada LV.

  #----------------------------------------------------------------------------
  # Defina individualmente o parametro cada habilidade
  #----------------------------------------------------------------------------
  S_LEVEL[7] = {1=>18, 2=>12, 3=>5, 4=>12, 5=>12, 6=>12, 7=>12, 8=>12}
  S_LEVEL[61] = {1=>12, 2=>18, 3=>15, 4=>12, 5=>12, 6=>12, 7=>12, 8=>12}
  
  S_MIGHT[7] = {1=>8, 2=>2, 3=>5, 4=>2, 5=>2, 6=>2, 7=>2, 8=>2}
  S_MIGHT[61] = {1=>2, 2=>8, 3=>5, 4=>2, 5=>2, 6=>2, 7=>2, 8=>2}

  S_COST[7] = {1=>8, 2=>2, 3=>5, 4=>2, 5=>2, 6=>2, 7=>2, 8=>2}
  S_COST[61] = {1=>2, 2=>8, 3=>5, 4=>2, 5=>2, 6=>2, 7=>2, 8=>2}

  S_HIT[7] = {1=>2, 2=>1, 3=>1, 4=>1, 5=>1, 6=>1, 7=>1, 8=>1}
  S_HIT[61] = {1=>1, 2=>2, 3=>1, 4=>1, 5=>1, 6=>1, 7=>1, 8=>1}
  #----------------------------------------------------------------------------
  #A habilidade vai acertar varios inimigos  ????????# Se você descobrir para que serve me avise,por favor.
  #----------------------------------------------------------------------------
  SKILL_PATTERN = 0
  S_INTER[62] = {1=>5, 2=>8, 3=>8, 4=>8, 5=>8, 6=>8, 7=>8, 8=>8}
  S_SLOPE[61] = {1=>5, 2=>8, 3=>8, 4=>8, 5=>8, 6=>8, 7=>8, 8=>8}
  #Defina aqui qual é animação que a habilidade vai mudar ao 
  #fazer o LV-UP e a % de chance para que isso ocorra.
  USE_S_ANIME = true
  S_ANIME[61] = {1=>[[5, 99], [10, 99]], 2=>[[11, 99]]}
  #----------------------------------------------------------------------------
  # Definição dos atributos para cada habilidade hhmm ,Não sei por que mas da Bug,se você souber porque, me avise por favor.
  #----------------------------------------------------------------------------
  # O numero de atributo deve ser igual ao do seu Database 
  #S_ELEMENT[7] = {1=>{1=>[1], 2=>[2], 3=>[3]}, 2=>{1=>[2], 2=>[5]}}
  #----------------------------------------------------------------
  # Definição do elemento Status. hmm ,Não sei por que mas da Bug, se você souber porque, me avise por favor.
  #---------------------------------------------------------------
  # Qual é o elemento Status que a habilidade vai ganhar
  S_STATE_P[62] = {1=>{1=>[1], 2=>[2], 3=>[3]}, 2=>{1=>[2], 2=>[5]}}
  # Qual é o elemento Staus que a habilidade vai perder.
  S_STATE_N[61] = {1=>{1=>[1], 2=>[2], 3=>[3]}, 2=>{1=>[2], 2=>[5]}}

#==============================================================================
# ? ????????????
#==============================================================================
end


class Game_Actor
  include Skill_updata
  attr_accessor   :skill_use      # ???????
  attr_accessor   :skill_level    # ??????
  attr_accessor   :skill_power    # ????????
  attr_accessor   :skill_sp_cost  # ???SP?????
  attr_accessor   :skill_hit      # ??????
  attr_accessor   :skill_up       # ?????????
  attr_accessor   :skill_list     # ???EXP???
  alias skill_updata_init setup
  def setup(actor_id)
    skill_updata_init(actor_id)
    @skill_use = []
    @skill_level = []
    @skill_power = []
    @skill_sp_cost = []
    @skill_hit = []
    @skill_up = false
    @skill_list = []
    for id in 1...$data_skills.size
      @skill_use[id] = 0
      @skill_level[id] = 0
      @skill_power[id] = $data_skills[id].power
      @skill_sp_cost[id] = $data_skills[id].sp_cost
      @skill_hit[id] = $data_skills[id].hit
      @skill_list[id] = make_skill_list(id)
    end
  end

  def make_skill_list(skill_id)
    interval = S_INTER[skill_id]
    up_interval = ( (interval != nil and interval[@actor_id] != nil) ? interval[@actor_id] : UPDATA_INTERVAL )
    slope = S_SLOPE[skill_id]
    up_slope = ( (slope != nil and slope[@actor_id] != nil) ? slope[@actor_id] : 1 )
    limit = S_LEVEL[skill_id]
    limit_lv = ( (limit != nil and limit[@actor_id] != nil) ? limit[@actor_id] : LEVEL_LIMIT )
    list = []
    list[0] = 0
    for lv in 1...limit_lv+1
      exp = 0
      case SKILL_PATTERN
      when 0
        exp = up_interval * lv
      when 1
        exp = list[lv-1] + up_slope * lv + up_interval
      end
      list[lv] = exp.truncate
    end
    return list
  end
end


class Game_Battler
  include Skill_updata
  alias skill_effect_update skill_effect
  def skill_effect(user, skill)
    up_flag = false
    if user.is_a?(Game_Actor) and ($scene.is_a?(Scene_Battle) or MENU_COUNT)
      skill_update_main(user, skill)
      skill_base = skill.dup
      if SKILL_MIGHT_UP
        skill.power = user.skill_power[skill.id]
      end
      if SKILL_HIT_UP
        skill.hit = user.skill_hit[skill.id]
      end
      if ELEMENT_CHANGE and S_ELEMENT != []
        ele1 = S_ELEMENT[skill.id]
        if ele1 != nil and ele1[user.id] != nil
          ele2 = ele1[user.id]
          if ele2 != [] and ele2[user.skill_level[skill.id]] != nil
            skill.element_set = ele2[user.skill_level[skill.id]]
          end
        end
      end
      if STATE_CHANGE
        if S_STATE_P != []
          pst1 = S_STATE_P[skill.id]
          if pst1 != nil and pst1[user.id] != nil
            pst2 = pst1[user.id]
            if pst2 != nil and pst2[user.skill_level[skill.id]] != nil
              skill.plus_state_set = pst2[user.skill_level[skill.id]]
              p skill.plus_state_set
            end
          end
        end
        if S_STATE_N != []
          nst1 = S_STATE_N[skill.id]
          if nst1 != nil and nst1[user.id] != nil
            nst2 = nst1[user.id]
            if nst1 != nil and nst2[user.skill_level[skill.id]] != nil
              skill.minus_state_set = nst2[user.skill_level[skill.id]]
            end
          end
        end
      end
      up_flag = true
    end
    ret = skill_effect_update(user, skill)    # ??
    if up_flag
      skill = skill_base
      if self.damage == "Miss"
        skill_use_recount(user, skill)
      end
    end
    return ret
  end
  
  def skill_update_main(actor, skill)
    actor.skill_use[skill.id] += 1
    limit = S_LEVEL[skill.id]
    s_limit = ( (limit != nil and limit[actor.id] != nil) ? limit[actor.id] : LEVEL_LIMIT)
    if s_limit == false or actor.skill_level[skill.id] < s_limit
      interval = actor.skill_list[skill.id]
      if actor.skill_use[skill.id] == interval[actor.skill_level[skill.id]+1]
        actor.skill_level[skill.id] += 1
        actor.skill_up = true
        if SKILL_MIGHT_UP
          might = S_MIGHT[skill.id]
          might_rate = ((might != nil and might[actor.id] != nil) ? might[actor.id] : MIGHT_RATE)
          actor.skill_power[skill.id] += skill.power * might_rate / 100
          actor.skill_power[skill.id] = actor.skill_power[skill.id].truncate
        end
        if SP_COST_DOWN
          cost = S_COST[skill.id]
          cost_rate = ((cost != nil and cost[actor.id] != nil) ? cost[actor.id] : COST_RATE)
          actor.skill_sp_cost[skill.id] -= skill.sp_cost * cost_rate / 100
          actor.skill_sp_cost[skill.id] = actor.skill_sp_cost[skill.id].truncate
          if actor.skill_sp_cost[skill.id] < 0
            actor.skill_sp_cost[skill.id] = 0
          end
        end
        if SKILL_HIT_UP
          hit = S_HIT[skill.id]
          hit_rate = ((hit != nil and hit[actor.id] != nil) ? hit[actor.id] : HIT_RATE)
          actor.skill_hit[skill.id] += skill.hit * hit_rate / 100
          actor.skill_hit[skill.id] = actor.skill_hit[skill.id].truncate
          # 100????????
          if actor.skill_hit[skill.id] > 100
            actor.skill_hit[skill.id] = 100
          end
        end
      end
    end
  end
  
  def skill_use_recount(actor, skill)
    if actor.skill_up
      actor.skill_level[skill.id] -= 1
      if SKILL_MIGHT_UP
        actor.skill_power[skill.id] = skill.power
        might = S_MIGHT[skill.id]
        might_rate = ((might != nil and might[actor.id] != nil) ? might[actor.id] : MIGHT_RATE)
        for i in 1...actor.skill_level[skill.id]
          actor.skill_power[skill.id] += skill.power * might_rate / 100
          actor.skill_power[skill.id] = actor.skill_power[skill.id].truncate
        end
      end
      if SP_COST_DOWN
        actor.skill_sp_cost[skill.id] = skill.sp_cost
        cost = S_COST[skill.id]
        cost_rate = ((cost != nil and cost[actor.id] != nil) ? cost[actor.id] : COST_RATE)
        for i in 1...actor.skill_level[skill.id]
          actor.skill_sp_cost[skill.id] -= skill.sp_cost * cost_rate / 100
          actor.skill_sp_cost[skill.id] = actor.skill_sp_cost[skill.id].truncate
        end
        if actor.skill_sp_cost[skill.id] < 0
          actor.skill_sp_cost[skill.id] = 0
        end
      end
      if SKILL_HIT_UP
        actor.skill_hit[skill.id] = skill.hit
        hit = S_HIT[skill.id]
        hit_rate = ((hit != nil and hit[actor.id] != nil) ? hit[actor.id] : HIT_RATE)
        for i in 1...actor.skill_level[skill.id]
          actor.skill_hit[skill.id] += skill.hit * hit_rate / 100
          actor.skill_hit[skill.id] = actor.skill_hit[skill.id].truncate
        end
        if actor.skill_hit[skill.id] > 100
          actor.skill_hit[skill.id] = 100
        end
      end
      actor.skill_up = false
    end
    actor.skill_use[skill.id] -= 1
  end
end

#==============================================================================
# ?????????????????
#==============================================================================
class Scene_Battle
  include Skill_updata
  alias update_phase4_step4_skillup update_phase4_step4
  def update_phase4_step4
    update_phase4_step4_skillup
    if @active_battler.is_a?(Game_Actor) and USE_S_ANIME
      s_anime = S_ANIME[@skill.id]
      if s_anime != nil and s_anime[@active_battler.id] != nil
        s_anime_set = s_anime[@active_battler.id]
        for i in 0...s_anime_set.size
          s_anime_def = s_anime_set[i]
          if @active_battler.skill_level[@skill.id] >= s_anime_def[0]
            for target in @target_battlers
              target.animation_id = s_anime_def[1]
            end
          end
        end
      end
    end
  end
end

#==============================================================================
# ?????????????(???????????????????OK)
#==============================================================================
class Scene_Battle
  include Skill_updata
  if SHOW_SKILL_LV_UP
  alias update_phase4_step2_skillup update_phase4_step2
  def update_phase4_step2
    if @active_battler.is_a?(Game_Actor)
      @active_battler.skill_up = false
    end
    @skillup = false
    update_phase4_step2_skillup   # ??
  end
  alias update_phase4_step3_skillup update_phase4_step3
  def update_phase4_step3
    if @active_battler.is_a?(Game_Actor) and @active_battler.skill_up != false
      @skillup = true
      @skill_up_window = Window_Skillup.new(@active_battler)
      if SKILLUP_SE != nil
        Audio.se_play("Audio/SE/" + SKILLUP_SE)
        sleep(0.1)
        end
    end
    update_phase4_step3_skillup
  end
  alias update_phase4_step5_skillup update_phase4_step5
  def update_phase4_step5
    if @active_battler.is_a?(Game_Actor) and @skillup
      @skill_up_window.dispose
      @active_battler.skill_up = false
      @skillup = false
    end
    update_phase4_step5_skillup     
  end
  alias update_skillup update
  def update
    if @active_battler.is_a?(Game_Actor) and @active_battler.skill_up and @skillup
      @skill_up_window.contents_opacity -= 4
    end
    update_skillup             
      end
  end 
end

class Window_Skillup < Window_Base
  def initialize(actor)
    super(actor.screen_x-140, 260, 250, 64)
    self.contents = Bitmap.new(width - 32, height - 32)
    self.opacity = 0
    self.contents.font.color = Color.new(255, 64, 0)
        self.contents.draw_text(80, 0, 150, 32, "LEVEL UP!")
  end
end



#==============================================================================
# ???????????(SP??????????????????OK)
#==============================================================================
class Window_Skill < Window_Selectable
  #--------------------------------------------------------------------------
  # ? ?????
  #     index : ????
  #--------------------------------------------------------------------------
  def draw_item(index)
    skill = @data[index]
    if @actor.skill_can_use?(skill.id)
      self.contents.font.color = normal_color
    else
      self.contents.font.color = disabled_color
    end
    x = 4 + index % 2 * (288 + 32)
    y = index / 2 * 32
    rect = Rect.new(x, y, self.width / @column_max - 32, 32)
    self.contents.fill_rect(rect, Color.new(0, 0, 0, 0))
    bitmap = RPG::Cache.icon(skill.icon_name)
    opacity = self.contents.font.color == normal_color ? 255 : 128
    self.contents.blt(x, y + 4, bitmap, Rect.new(0, 0, 24, 24), opacity)
#-??-----
    @actor.skill_level[skill.id] = 0 if @actor.skill_level[skill.id] == nil
    name_level = skill.name + "(Lv" + @actor.skill_level[skill.id].to_s + ")" 
    self.contents.draw_text(x + 28, y, 204, 32, name_level, 0)
    @actor.skill_sp_cost[skill.id] = skill.sp_cost if @actor.skill_sp_cost[skill.id] == nil
    self.contents.draw_text(x + 232, y, 48, 32, @actor.skill_sp_cost[skill.id].to_s, 2)
#----------
  end
end

class Scene_Skill
  #--------------------------------------------------------------------------
  # ? ?????? (???????????????????)
  #--------------------------------------------------------------------------
  def update_target
    # B ??????????
    if Input.trigger?(Input::B)
      # ????? SE ???
      $game_system.se_play($data_system.cancel_se)
      # ?????????????
      @skill_window.active = true
      @target_window.visible = false
      @target_window.active = false
      return
    end
    # C ??????????
    if Input.trigger?(Input::C)
      # SP ????????????????
      unless @actor.skill_can_use?(@skill.id)
        # ??? SE ???
        $game_system.se_play($data_system.buzzer_se)
        return
      end
      # ???????????
      if @target_window.index == -1
        # ??????????????????
        used = false
        for i in $game_party.actors
          used |= i.skill_effect(@actor, @skill)
        end
      end
      # ????????????
      if @target_window.index <= -2
        # ??????????????????????
        target = $game_party.actors[@target_window.index + 10]
        used = target.skill_effect(@actor, @skill)
      end
      # ???????????
      if @target_window.index >= 0
        # ??????????????????????
        target = $game_party.actors[@target_window.index]
        used = target.skill_effect(@actor, @skill)
      end
      # ?????????
      if used
        # ??????? SE ???
        $game_system.se_play(@skill.menu_se)
#-----??------------------------------------------------------
        @actor.skill_sp_cost[@skill.id] = @skill.sp_cost if @actor.skill_sp_cost[@skill.id] == nil
        # SP ??
        @actor.sp -= @actor.skill_sp_cost[@skill.id]
#---------------------------------------------------------------
        # ?????????????
        @status_window.refresh
        @skill_window.refresh
        @target_window.refresh
        # ?????
        if $game_party.all_dead?
          # ??????????????
          $scene = Scene_Gameover.new
          return
        end
        # ??????? ID ??????
        if @skill.common_event_id > 0
          # ?????????????
          $game_temp.common_event_id = @skill.common_event_id
          # ??????????
          $scene = Scene_Map.new
          return
        end
      end
      # ????????????
      unless used
        # ??? SE ???
        $game_system.se_play($data_system.buzzer_se)
      end
      return
    end
  end
end

class Scene_Battle
  include Skill_updata
  #--------------------------------------------------------------------------
  # ? ???????? ????
  #--------------------------------------------------------------------------
  alias make_skill_action_result_skill_update make_skill_action_result
  def make_skill_action_result
    make_skill_action_result_skill_update
    # SP ??
    if SP_COST_DOWN and @active_battler.is_a?(Game_Actor)
      @active_battler.sp += @skill.sp_cost
      @active_battler.sp -= @active_battler.skill_sp_cost[@skill.id]
    end
  end
end

class Game_Battler
  #--------------------------------------------------------------------------
  # ? ??????????
  #     skill_id : ??? ID
  #--------------------------------------------------------------------------
  alias skill_update_can_use? skill_can_use?
  def skill_can_use?(skill_id)
    ret = skill_update_can_use?(skill_id)
    if !ret and SP_COST_DOWN
      # SP ?????????????????
      if $data_skills[skill_id].sp_cost > self.sp
        if self.is_a?(Game_Actor)
          skill_sp_cost = self.skill_sp_cost[skill_id]
          if skill_sp_cost < self.sp
            ret = true
          end
        end
      end
    end
    return ret
  end
end

#==============================================================================
# ???????????
#==============================================================================
class Interpreter
  include Skill_updata
  #--------------------------------------------------------------------------
  # ? ????????(??????)
  #     actor_id  :   ????ID
  #     skill_id  :   ???ID
  #     level     :   ?????
  #--------------------------------------------------------------------------
  def set_skill_level(actor_id, skill_id, level)
    actor = $game_actors[actor_id]
    skill = $data_skills[skill_id]
    # ??????
    limit = S_LEVEL[skill_id]
    s_limit = ( (limit != nil and limit[actor.id] != nil) ? limit[actor.id] : LEVEL_LIMIT)
    if level > s_limit or level < 0
      return
    end
    # ???
    actor.skill_level[skill.id] = level
    # ????
    use_list = actor.skill_list[skill.id]
    actor.skill_use[skill.id] = use_list[level]
    # ??????
    if SKILL_MIGHT_UP
      actor.skill_power[skill.id] = skill.power
      might = S_MIGHT[skill.id]
      might_rate = ((might != nil and might[actor.id] != nil) ? might[actor.id] : MIGHT_RATE)
      for i in 0...level
        actor.skill_power[skill.id] += skill.power * might_rate / 100
        actor.skill_power[skill.id] = actor.skill_power[skill.id].truncate
      end
    end
    # SP?????
    if SP_COST_DOWN
      actor.skill_sp_cost[skill.id] = skill.sp_cost
      cost = S_COST[skill.id]
      cost_rate = ((cost != nil and cost[actor.id] != nil) ? cost[actor.id] : COST_RATE)
      for i in 0...level
        actor.skill_sp_cost[skill.id] -= skill.sp_cost * cost_rate / 100
        actor.skill_sp_cost[skill.id] = actor.skill_sp_cost[skill.id].truncate
      end
      # SP???0????????
      if actor.skill_sp_cost[skill.id] < 0
        actor.skill_sp_cost[skill.id] = 0
      end
    end
    # ??????
    if SKILL_HIT_UP
      actor.skill_hit[skill.id] = skill.hit
      hit = S_HIT[skill.id]
      hit_rate = ((hit != nil and hit[actor.id] != nil) ? hit[actor.id] : HIT_RATE)
      for i in 0...level
        actor.skill_hit[skill.id] += skill.hit * hit_rate / 100
        actor.skill_hit[skill.id] = actor.skill_hit[skill.id].truncate
      end
      # 100????????
      if actor.skill_hit[skill.id] > 100
        actor.skill_hit[skill.id] = 100
      end
    end
  end
  
  #--------------------------------------------------------------------------
  # ? ????????(??????)
  #     actor_id  :   ????ID
  #     skill_id  :   ???ID
  #--------------------------------------------------------------------------
  def skill_level_up(actor_id, skill_id)
    actor = $game_actors[actor_id]
    set_skill_level(actor_id, skill_id, actor.skill_level[skill_id]+1)
  end
  
  #--------------------------------------------------------------------------
  # ? ????????(??????)
  #     actor_id  :   ????ID
  #     skill_id  :   ???ID
  #--------------------------------------------------------------------------
  def skill_level_down(actor_id, skill_id)
    actor = $game_actors[actor_id]
    set_skill_level(actor_id, skill_id, actor.skill_level[skill_id]-1)
  end
end


